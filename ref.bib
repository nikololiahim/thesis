@book{meyer,
	address = {Berlin, Heidelberg},
	title = {Touch of {Class}},
	isbn = {9783540921448 9783540921455},
	url = {http://link.springer.com/10.1007/978-3-540-92145-5},
	language = {en},
	urldate = {2022-05-31},
	publisher = {Springer Berlin Heidelberg},
	author = {Meyer, Bertrand},
	year = {2009},
	doi = {10.1007/978-3-540-92145-5},
}

@article{pattern_matching,
	title = {Pattern {Matching} {Based} on {Object} {Graphs}},
	volume = {9},
	issn = {2169-3536},
	url = {https://ieeexplore.ieee.org/document/9617454/},
	doi = {10.1109/ACCESS.2021.3128575},
	urldate = {2022-05-31},
	journal = {IEEE Access},
	author = {Ke, Wei and Chan, Ka-Hou},
	year = {2021},
	pages = {159313--159325},
}

@article{adts,
	title = {Generalized algebraic data types and object-oriented programming},
	volume = {40},
	issn = {0362-1340, 1558-1160},
	url = {https://dl.acm.org/doi/10.1145/1103845.1094814},
	doi = {10.1145/1103845.1094814},
	abstract = {Generalized algebraic data types (GADTs) have received much attention recently in the functional programming community. They generalize the (type) parameterized algebraic datatypes (PADTs) of ML and Haskell by permitting value constructors to return specific, rather than parametric, type-instantiations of their own datatype. GADTs have a number of applications, including strongly-typed evaluators, generic pretty-printing, generic traversals and queries, and typed LR parsing. We show that existing object-oriented programming languages such as Java and C\# can express GADT definitions, and a large class of GADT-manipulating programs, through the use of generics, subclassing, and virtual dispatch. However, some programs can be written only through the use of redundant runtime casts. Moreover, instantiation-specific, yet safe, operations on ordinary PADTs only admit indirect cast-free implementations, via higher-order encodings. We propose a generalization of the type constraint mechanisms of C\# and Java to both avoid the need for casts in GADT programs and higher-order contortions in PADT programs; we present a Visitor pattern for GADTs, and describe a refined switch construct as an alternative to virtual dispatch on datatypes. We formalize both extensions and prove type soundness.},
	language = {en},
	number = {10},
	urldate = {2022-05-31},
	journal = {ACM SIGPLAN Notices},
	author = {Kennedy, Andrew and Russo, Claudio V.},
	month = oct,
	year = {2005},
	pages = {21--40},
}

@article{dfs,
  title={Depth-first search},
  author={Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford},
  journal={Introduction to algorithms},
  pages={540--549},
  year={2001},
  publisher={MIT Press, McGraw-Hill New York, NY, USA}
}

@article{kudasov,
	title = {Formalizing \$φ\$-calculus: a purely object-oriented calculus of decorated objects},
	copyright = {Creative Commons Attribution 4.0 International},
	shorttitle = {Formalizing \$φ\$-calculus},
	url = {https://arxiv.org/abs/2204.07454},
	doi = {10.48550/ARXIV.2204.07454},
	abstract = {Many calculi exist for modelling various features of object-oriented languages. Many of them are based on \$λ\$-calculus and focus either on statically typed class-based languages or dynamic prototype-based languages. We formalize untyped calculus of decorated objects, informally presented by Bugayenko, which is defined in terms of objects and relies on decoration as a primary mechanism of object extension. It is not based on \$λ\$-calculus, yet with only four basic syntactic constructions is just as complete. We prove the calculus is confluent (i.e. possesses Church-Rosser property), and introduce an abstract machine for call-by-name evaluation. Finally, we provide a sound translation to \$λ\$-calculus with records.},
	urldate = {2022-05-29},
	author = {Kudasov, Nikolai and Sim, Violetta},
	year = {2022},
	keywords = {Programming Languages (cs.PL), Logic in Computer Science (cs.LO), FOS: Computer and information sciences, FOS: Computer and information sciences},
}


@inproceedings{raiha_delegation:_1994,
	address = {Baltimore, Maryland, United States},
	title = {Delegation: dynamic specialization},
	isbn = {9780897916660},
	shorttitle = {Delegation},
	url = {http://portal.acm.org/citation.cfm?doid=197694.197718},
	doi = {10.1145/197694.197718},
	language = {en},
	urldate = {2022-05-27},
	booktitle = {Proceedings of the conference on {TRI}-{Ada} '94  - {TRI}-{Ada} '94},
	publisher = {ACM Press},
	author = {Räihä, Liisa},
	year = {1994},
	pages = {172--179},
}


@article{hill_combinators_1996,
	title = {Combinators for parsing expressions},
	volume = {6},
	issn = {0956-7968, 1469-7653},
	url = {https://www.cambridge.org/core/product/identifier/S0956796800001799/type/journal_article},
	doi = {10.1017/S0956796800001799},
	abstract = {Abstract
            This paper describes a scheme for constructing parsers based on the top-down combinator approach. In particular, it describes a set of combinators for parsing expressions described by ambiguous grammars with precedence and associativity rules. The new combinators embody the mechanical grammar manipulations typically employed to remove left-recursion and hence help to avoid the possibility of a non-terminating parser. A number of approaches to the problem are described—the most elegant and efficient method is based on continuation passing. As a practical demonstration, a parser for the expression part of the C programming language is presented. The expression combinators are general, and may be constructed from any suitable set of top-down combinators. A comparison with parser generators shows that the combinator approach is most applicable for rapid development.},
	language = {en},
	number = {3},
	urldate = {2022-05-24},
	journal = {Journal of Functional Programming},
	author = {Hill, Steve},
	month = may,
	year = {1996},
	pages = {445--464},
}

@InProceedings{fragilebaseclass,
author="Mikhajlov, Leonid
and Sekerinski, Emil",
editor="Jul, Eric",
title="A study of the fragile base class problem",
booktitle="ECOOP'98 --- Object-Oriented Programming",
year="1998",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="355--382",
abstract="In this paper we study the fragile base class problem. This problem occurs in open object-oriented systems employing code inheritance as an implementation reuse mechanism. System developers unaware of extensions to the system developed by its users may produce a seemingly acceptable revision of a base class which may damage its extensions. The fragile base class problem becomes apparent during maintenance of open object-oriented systems, but requires consideration during design. We express the fragile base class problem in terms of a flexibility property. By means of five orthogonal examples, violating the flexibility property, we demonstrate different aspects of the problem. We formulate requirements for disciplining inheritance, and extend the refinement calculus to accommodate for classes, objects, class-based inheritance, and class refinement. We formulate and formally prove a flexibility theorem demonstrating that the restrictions we impose on inheritance are sufficient to permit safe substitution of a base class with its revision in presence of extension classes.",
isbn="978-3-540-69064-1"
}



@article{eolang,
  author    = {Yegor Bugayenko},
  title     = {{EOLANG} and phi-calculus},
  journal   = {CoRR},
  volume    = {abs/2111.13384},
  year      = {2021},
  url       = {https://arxiv.org/abs/2111.13384},
  eprinttype = {arXiv},
  eprint    = {2111.13384},
  timestamp = {Wed, 01 Dec 2021 15:16:43 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2111-13384.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{oop1,
  title={Object-oriented programming languages: interpretation},
  author={Craig, Iain D},
  year={2007},
  publisher={Springer}
}

@article{alankay,
  title={Dr. Alan Kay on the Meaning of" Object-Oriented Programming"},
  author={Ram, Stefan L and others},
  year={2003},
  publisher={Stefan L. Ram, Berlin, Germany.}
}

@article{oopfailed,
  title={Has OOP Failed?},
  author={Mansfield, Richard},
  year={2005}
}

@article{vallee1998jimple,
  title={Jimple: Simplifying Java bytecode for analyses and transformations},
  author={Vallee-Rai, Raja and Hendren, Laurie J},
  year={1998},
  publisher={Citeseer}
}
@incollection{vallee2010soot,
  title={Soot: A Java bytecode optimization framework},
  author={Vall{\'e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
  booktitle={CASCON First Decade High Impact Papers},
  pages={214--224},
  year={2010}
}

@inproceedings{llvm,
  title={LLVM: A compilation framework for lifelong program analysis \& transformation},
  author={Lattner, Chris and Adve, Vikram},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.},
  pages={75--86},
  year={2004},
  organization={IEEE}
}

@book{GOFPatterns,
  title = {Design patterns: elements of reusable object-oriented software},
  author = {E. Gamma and R. Helm and Ralph E. Johnson and   J. Vlissides},
  year = {1995},
  tags = {design science, reuse, e-science, Meta-Environment, design, meta-objects},
  researchr = {https://researchr.org/publication/GOF95},
  cites = {0},
  citedby = {1},
  publisher = {Addison-Wesley Professional},
}

@inproceedings{comparison2,
title = "Analyzing the State of Static Analysis: A Large-Scale Evaluation in Open Source Software",
keywords = "General Defect Classification, Automated Static Analysis Tools, ASATs, GitHub, Open-Source Software",
author = "Moritz Beller and Radjino Bholanath and Shane McIntosh and Andy Zaidman",
year = "2016",
month = mar,
doi = "10.1109/SANER.2016.105",
language = "English",
pages = "470--481",
booktitle = "Proceedings of the 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering",
publisher = "IEEE ",
address = "United States",
}

% @inproceedings{comparison3,
%   title={A Survey on Code Analysis Tools for Software Maintenance Prediction},
%   author={Valentina Lenarduzzi and Alberto Sillitti and Davide Taibi},
%   booktitle={SEDA},
%   year={2018}
% }

@article{comparison4,
  title={Comparison of Static Code Analysis Tools},
  author={Matti Mantere and Ilkka Uusitalo and Juha R{\"o}ning},
  journal={2009 Third International Conference on Emerging Security Information, Systems and Technologies},
  year={2009},
  pages={15-22}
}

@article{comparison5,
  title={Comparing Static Security Analysis Tools Using Open Source Software},
  author={Ryan K. McLean},
  journal={2012 IEEE Sixth International Conference on Software Security and Reliability Companion},
  year={2012},
  pages={68-74}
}

% @inproceedings{comparison6,
% author = {Rahman, Foyzur and Khatri, Sameer and Barr, Earl T. and Devanbu, Premkumar},
% title = {Comparing Static Bug Finders and Statistical Prediction},
% year = {2014},
% isbn = {9781450327565},
% publisher = {Association for Computing Machinery},
% address = {New York, NY, USA},
% url = {https://doi.org/10.1145/2568225.2568269},
% doi = {10.1145/2568225.2568269},
% booktitle = {Proceedings of the 36th International Conference on Software Engineering},
% pages = {424–434},
% numpages = {11},
% keywords = {Inspection, Fault Prediction, Empirical Software Engineering, Empirical Research, Software Quality},
% location = {Hyderabad, India},
% series = {ICSE 2014}
% }

@inproceedings{comparison7,
	title="A comparison of bug finding tools for Java",
	author="N. {Rutar} and C.B. {Almazan} and J.S. {Foster}",
	booktitle="15th International Symposium on Software Reliability Engineering",
	pages="245--256",
	notes="Sourced from Microsoft Academic - https://academic.microsoft.com/paper/1541063262",
	year="2004"
}


@INPROCEEDINGS{comparison8,  author={Habib, Andrew and Pradel, Michael},  booktitle={2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)},   title={How Many of All Bugs Do We Find? A Study of Static Bug Detectors},   year={2018},  volume={},  number={},  pages={317-328},  doi={10.1145/3238147.3238213}}


@article{tools1,
author = {Tomas, P. and Escalona, M.J. and Mejías, M.},
year = {2013},
month = {11},
pages = {244–255},
title = {Open source tools for measuring the Internal Quality of Java software products. A survey},
volume = {36},
journal = {Computer Standards \& Interfaces},
doi = {10.1016/j.csi.2013.08.006}
}

@INPROCEEDINGS{usage1,  author={Vassallo, Carmine and Panichella, Sebastiano and Palomba, Fabio and Proksch, Sebastian and Zaidman, Andy and Gall, Harald C.},  booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},   title={Context is king: The developer perspective on the usage of static analysis tools},   year={2018},  volume={},  number={},  pages={38-49},  doi={10.1109/SANER.2018.8330195}}

﻿@Article{usage2,
author={Vassallo, Carmine
and Panichella, Sebastiano
and Palomba, Fabio
and Proksch, Sebastian
and Gall, Harald C.
and Zaidman, Andy},
title={How developers engage with static analysis tools in different contexts},
journal={Empirical Software Engineering},
year={2020},
month={03},
day={01},
volume={25},
number={2},
pages={1419-1457},
issn={1573-7616},
doi={10.1007/s10664-019-09750-5},
url={https://doi.org/10.1007/s10664-019-09750-5}
}

@inproceedings{usage3,
author = {Zampetti, Fiorella and Scalabrino, Simone and Oliveto, Rocco and Canfora, Gerardo and Di Penta, Massimiliano},
title = {How Open Source Projects Use Static Code Analysis Tools in Continuous Integration Pipelines},
year = {2017},
isbn = {9781538615447},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2017.2},
doi = {10.1109/MSR.2017.2},
pages = {334–344},
numpages = {11},
keywords = {static analysis tools, continuous integration, open source projects, empirical study},
location = {Buenos Aires, Argentina},
series = {MSR '17}
}


@article{google1,
author = {Sadowski, Caitlin and Aftandilian, Edward and Eagle, Alex and Miller-Cushon, Liam and Jaspan, Ciera},
title = {Lessons from Building Static Analysis Tools at Google},
year = {2018},
issue_date = {April 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {61},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/3188720},
doi = {10.1145/3188720},
abstract = {For a static analysis project to succeed, developers must feel they benefit from and
enjoy using it.},
journal = {Commun. ACM},
month = mar,
pages = {58–66},
numpages = {9}
}

@ARTICLE{usage4,
    author={Ayewah, Nathaniel and Pugh, William and Hovemeyer, David and Morgenthaler, J. David and Penix, John},
    journal={IEEE Software},
    title={Using Static Analysis to Find Bugs},
    year={2008},
    volume={25},
    number={5},
    pages={22-29},
    doi={10.1109/MS.2008.130}
}

@INPROCEEDINGS{testing2,
author = {Liang, Guangtai and Wu, Ling and Wu, Qian and Wang, Qianxiang and Xie, Tao and Mei, Hong},
title = {Automatic Construction of an Effective Training Set for Prioritizing Static Analysis Warnings},
year = {2010},
isbn = {9781450301169},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1858996.1859013},
doi = {10.1145/1858996.1859013},
booktitle = {Proceedings of the IEEE/ACM International Conference on Automated Software Engineering},
pages = {93–102},
numpages = {10},
keywords = {warning prioritization, generic-bug-related lines, static analysis tools, training-set construction},
location = {Antwerp, Belgium},
series = {ASE '10}
}

@InProceedings{usage5,
author="Lu, Bailin
and Dong, Wei
and Yin, Liangze
and Zhang, Li",
editor="Bu, Lei
and Xiong, Yingfei",
title="Evaluating and Integrating Diverse Bug Finders for Effective Program Analysis",
booktitle="Software Analysis, Testing, and Evolution",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="51--67",
isbn="978-3-030-04272-1"
}

@inproceedings{testing3,
author = {Sadowski, Caitlin and Gogh, Jeffrey and Jaspan, Ciera and Söderberg, Emma and Winter, Collin},
year = {2015},
month = {05},
pages = {},
title = {Tricorder: Building a Program Analysis Ecosystem},
doi = {10.1109/ICSE.2015.76}
}

@article{testing4,
  title={A bug finder refined by a large set of open-source projects},
  author={Jaechang Nam and Song Wang and Yuan Xi and Lin Tan},
  journal={Inf. Softw. Technol.},
  year={2019},
  volume={112},
  pages={164-175}
}

@article{testing5,
author = {Thung, Ferdian and Lucia, Lucia and Lo, David and Jiang, Lingxiao and Rahman, Foyzur and Devanbu, Premkumar},
year = {2012},
month = {09},
pages = {},
title = {To what extent could we detect field defects? An empirical study of false negatives in static bug finding tools},
volume = {22},
journal = {Automated Software Engineering},
doi = {10.1145/2351676.2351685}
}

@inproceedings{corpus1,
  author = {Tempero, Ewan and Anslow, Craig and Dietrich, Jens and Han, Ted and Li, Jing and Lumpe, Markus and Melton, Hayden and Noble, James},
  title = {Qualitas Corpus: A Curated Collection of Java Code for Empirical Studies},
  booktitle = {2010 Asia Pacific Software Engineering Conference (APSEC2010)},
  pages = {336--345},
  month = dec,
  year = {2010},
  doi = {http://dx.doi.org/10.1109/APSEC.2010.46}
}